version: '3.8'

# Docker Compose para entorno de desarrollo completo
# Incluye PostgreSQL, Redis y Superset

volumes:
  postgres_data:
    external: false
  superset_home:
    external: false

networks:
  prod_backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # PostgreSQL con extensiones y configuración personalizada
  postgres:
    build:
      context: ./shared/postgres
      dockerfile: postgres.Dockerfile
    container_name: postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-a8Nci+MpaOcFYzSa}
      - POSTGRES_MULTIPLE_DATABASES=n8n_database,evolution_database,chatwoot,talento_chats,superset
    volumes:
      - postgres_data:/home/postgres/pgdata/data
      - ./shared/postgres/init/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
      - ./shared/postgres/init/init-ssl.sh:/docker-entrypoint-initdb.d/init-ssl.sh
      - ./shared/postgres/init/docker-init.sh:/docker-init.sh
      - ./shared/postgres/ssl:/var/lib/postgresql/ssl:rw
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    entrypoint: ["/docker-init.sh"]
    networks:
      - prod_backend

  # Redis con autenticación y persistencia
  redis:
    image: redis:7-alpine
    container_name: redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-CQhgg6uELsQQwUXA} --appendonly yes --bind 0.0.0.0
    volumes:
      - ./shared/redis/data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-CQhgg6uELsQQwUXA}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - prod_backend
    depends_on:
      postgres:
        condition: service_healthy

  # Superset - Inicialización de base de datos
  superset-init:
    image: apache/superset:${SUPERSET_TAG:-latest-dev}
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: 
      - ./superset/docker/.env-non-dev
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-change-this-secret-key}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES:-yes}
    user: "root"
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    networks:
      - prod_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      disable: true

  # Superset - Aplicación web principal
  superset:
    image: apache/superset:${SUPERSET_TAG:-latest-dev}
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    env_file: 
      - ./superset/docker/.env-non-dev
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-change-this-secret-key}
      SUPERSET_LOAD_EXAMPLES: ${SUPERSET_LOAD_EXAMPLES:-yes}
    user: "root"
    restart: unless-stopped
    ports:
      - "8088:8088"
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    networks:
      - prod_backend
    depends_on:
      superset-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Superset - Worker para tareas asíncronas
  superset-worker:
    image: apache/superset:${SUPERSET_TAG:-latest-dev}
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: 
      - ./superset/docker/.env-non-dev
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-change-this-secret-key}
    user: "root"
    restart: unless-stopped
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    networks:
      - prod_backend
    depends_on:
      superset:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Superset - Scheduler para tareas programadas
  superset-worker-beat:
    image: apache/superset:${SUPERSET_TAG:-latest-dev}
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: 
      - ./superset/docker/.env-non-dev
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-change-this-secret-key}
    user: "root"
    restart: unless-stopped
    volumes:
      - ./superset/docker:/app/docker
      - superset_home:/app/superset_home
    networks:
      - prod_backend
    depends_on:
      superset:
        condition: service_started
    healthcheck:
      disable: true