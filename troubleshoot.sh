#!/bin/bash\n\n# Troubleshooting script para el entorno de desarrollo de BI Automation\n# Soluciona problemas comunes autom√°ticamente\n\nset -e\n\n# Colores para output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_message() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"${BLUE}=====================================\\n$1\\n=====================================${NC}\"\n}\n\nprint_header \"üîß BI AUTOMATION - TROUBLESHOOTING\"\n\n# Funci√≥n para verificar y arreglar permisos\nfix_permissions() {\n    print_message \"Verificando y arreglando permisos...\"\n    \n    # Hacer ejecutables los scripts principales\n    chmod +x dev-stack.sh 2>/dev/null || true\n    chmod +x superset/quick-setup.sh 2>/dev/null || true\n    chmod +x superset/setup-superset.sh 2>/dev/null || true\n    \n    # Arreglar permisos en scripts de PostgreSQL\n    if [ -d \"shared/postgres/init\" ]; then\n        chmod +x shared/postgres/init/*.sh 2>/dev/null || true\n        print_message \"‚úÖ Permisos de scripts arreglados\"\n    fi\n}\n\n# Funci√≥n para limpiar contenedores problem√°ticos\nclean_containers() {\n    print_message \"Limpiando contenedores problem√°ticos...\"\n    \n    # Detener contenedores que puedan estar en mal estado\n    docker stop postgres_prod redis_prod superset_app superset_worker superset_worker_beat superset_init 2>/dev/null || true\n    \n    # Remover contenedores\n    docker rm postgres_prod redis_prod superset_app superset_worker superset_worker_beat superset_init 2>/dev/null || true\n    \n    print_message \"‚úÖ Contenedores limpiados\"\n}\n\n# Funci√≥n para verificar puertos\ncheck_ports() {\n    print_message \"Verificando puertos requeridos...\"\n    \n    ports=(\"5432\" \"6379\" \"8088\")\n    for port in \"${ports[@]}\"; do\n        if lsof -i :$port >/dev/null 2>&1; then\n            print_warning \"‚ö†Ô∏è  Puerto $port est√° en uso\"\n            print_message \"Procesos usando el puerto $port:\"\n            lsof -i :$port\n        else\n            print_message \"‚úÖ Puerto $port disponible\"\n        fi\n    done\n}\n\n# Funci√≥n para verificar red Docker\ncheck_network() {\n    print_message \"Verificando red Docker...\"\n    \n    if docker network ls | grep -q \"prod_backend\"; then\n        print_message \"‚úÖ Red prod_backend existe\"\n    else\n        print_warning \"‚ö†Ô∏è  Red prod_backend no existe, creando...\"\n        docker network create prod_backend\n        print_message \"‚úÖ Red prod_backend creada\"\n    fi\n}\n\n# Funci√≥n para verificar im√°genes Docker\ncheck_images() {\n    print_message \"Verificando im√°genes Docker...\"\n    \n    # Verificar imagen de Superset\n    if docker images | grep -q \"apache/superset\"; then\n        print_message \"‚úÖ Imagen de Superset disponible\"\n    else\n        print_warning \"‚ö†Ô∏è  Imagen de Superset no encontrada, descargando...\"\n        docker pull apache/superset:latest-dev\n    fi\n    \n    # Verificar imagen de Redis\n    if docker images | grep -q \"redis.*7\"; then\n        print_message \"‚úÖ Imagen de Redis 7 disponible\"\n    else\n        print_warning \"‚ö†Ô∏è  Imagen de Redis 7 no encontrada, descargando...\"\n        docker pull redis:7-alpine\n    fi\n    \n    # Verificar imagen de TimescaleDB\n    if docker images | grep -q \"timescale/timescaledb-ha\"; then\n        print_message \"‚úÖ Imagen de TimescaleDB disponible\"\n    else\n        print_warning \"‚ö†Ô∏è  Imagen de TimescaleDB no encontrada, descargando...\"\n        docker pull timescale/timescaledb-ha:pg17\n    fi\n}\n\n# Funci√≥n para verificar vol√∫menes\ncheck_volumes() {\n    print_message \"Verificando vol√∫menes Docker...\"\n    \n    if docker volume ls | grep -q \"postgres_data\"; then\n        print_message \"‚úÖ Volumen postgres_data existe\"\n    else\n        print_message \"‚ÑπÔ∏è  Volumen postgres_data se crear√° autom√°ticamente\"\n    fi\n}\n\n# Funci√≥n para verificar archivo .env\ncheck_env_file() {\n    print_message \"Verificando archivo .env...\"\n    \n    if [ ! -f \".env\" ]; then\n        if [ -f \".env.dev\" ]; then\n            print_message \"Copiando .env.dev a .env...\"\n            cp .env.dev .env\n            \n            # Generar SECRET_KEY si es posible\n            if command -v openssl &> /dev/null; then\n                SECRET_KEY=$(openssl rand -base64 42 | tr -d '/')\n                awk -v key=\"$SECRET_KEY\" '{\n                    if ($0 ~ /SUPERSET_SECRET_KEY=your-very-strong-secret-key-change-this-in-production/) {\n                        print \"SUPERSET_SECRET_KEY=\" key\n                    } else {\n                        print $0\n                    }\n                }' .env > .env.tmp && mv .env.tmp .env\n                print_message \"‚úÖ SECRET_KEY generada autom√°ticamente\"\n            fi\n        else\n            print_error \"‚ùå No se encontr√≥ .env.dev template\"\n            return 1\n        fi\n    else\n        print_message \"‚úÖ Archivo .env existe\"\n    fi\n}\n\n# Funci√≥n para verificar espacio en disco\ncheck_disk_space() {\n    print_message \"Verificando espacio en disco...\"\n    \n    available_space=$(df . | tail -1 | awk '{print $4}')\n    available_gb=$((available_space / 1024 / 1024))\n    \n    if [ $available_gb -lt 5 ]; then\n        print_warning \"‚ö†Ô∏è  Poco espacio en disco: ${available_gb}GB disponibles\"\n        print_message \"Se recomienda al menos 5GB libres\"\n    else\n        print_message \"‚úÖ Espacio en disco suficiente: ${available_gb}GB disponibles\"\n    fi\n}\n\n# Funci√≥n para probar conectividad b√°sica\ntest_connectivity() {\n    print_message \"Probando conectividad b√°sica...\"\n    \n    # Test internet connectivity\n    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then\n        print_message \"‚úÖ Conectividad a internet OK\"\n    else\n        print_warning \"‚ö†Ô∏è  Sin conectividad a internet\"\n    fi\n    \n    # Test Docker daemon\n    if docker version >/dev/null 2>&1; then\n        print_message \"‚úÖ Docker daemon corriendo\"\n    else\n        print_error \"‚ùå Docker daemon no responde\"\n        return 1\n    fi\n}\n\n# Funci√≥n principal de troubleshooting\nrun_troubleshooting() {\n    print_header \"üîç EJECUTANDO DIAGN√ìSTICOS\"\n    \n    fix_permissions\n    check_env_file\n    test_connectivity\n    check_disk_space\n    check_ports\n    check_network\n    check_volumes\n    check_images\n    \n    print_header \"‚úÖ DIAGN√ìSTICOS COMPLETADOS\"\n    \n    print_message \"Si persisten los problemas:\"\n    echo \"  1. Ejecuta: ./dev-stack.sh cleanup\"\n    echo \"  2. Reinicia Docker Desktop\"\n    echo \"  3. Ejecuta: ./dev-stack.sh start\"\n    echo \"\"\n    print_message \"Para problemas espec√≠ficos:\"\n    echo \"  - PostgreSQL: ./troubleshoot.sh postgres\"\n    echo \"  - Redis: ./troubleshoot.sh redis\"\n    echo \"  - Superset: ./troubleshoot.sh superset\"\n    echo \"  - Cleanup completo: ./troubleshoot.sh cleanup\"\n}\n\n# Funci√≥n para troubleshooting espec√≠fico de PostgreSQL\ntroubleshoot_postgres() {\n    print_header \"üêò TROUBLESHOOTING POSTGRESQL\"\n    \n    print_message \"Verificando contenedor PostgreSQL...\"\n    if docker ps | grep -q postgres_prod; then\n        print_message \"‚úÖ Contenedor postgres_prod corriendo\"\n        \n        # Test conectividad\n        if docker exec postgres_prod pg_isready -U postgres >/dev/null 2>&1; then\n            print_message \"‚úÖ PostgreSQL responde correctamente\"\n        else\n            print_warning \"‚ö†Ô∏è  PostgreSQL no responde, reiniciando...\"\n            docker restart postgres_prod\n            sleep 10\n        fi\n    else\n        print_error \"‚ùå Contenedor postgres_prod no est√° corriendo\"\n        print_message \"Iniciando PostgreSQL...\"\n        docker compose -f docker-compose.dev.yml up -d postgres\n    fi\n}\n\n# Funci√≥n para troubleshooting espec√≠fico de Redis\ntroubleshoot_redis() {\n    print_header \"üî¥ TROUBLESHOOTING REDIS\"\n    \n    print_message \"Verificando contenedor Redis...\"\n    if docker ps | grep -q redis_prod; then\n        print_message \"‚úÖ Contenedor redis_prod corriendo\"\n        \n        # Test conectividad\n        if docker exec redis_prod redis-cli -a CQhgg6uELsQQwUXA ping >/dev/null 2>&1; then\n            print_message \"‚úÖ Redis responde correctamente\"\n        else\n            print_warning \"‚ö†Ô∏è  Redis no responde, reiniciando...\"\n            docker restart redis_prod\n            sleep 5\n        fi\n    else\n        print_error \"‚ùå Contenedor redis_prod no est√° corriendo\"\n        print_message \"Iniciando Redis...\"\n        docker compose -f docker-compose.dev.yml up -d redis\n    fi\n}\n\n# Funci√≥n para troubleshooting espec√≠fico de Superset\ntroubleshoot_superset() {\n    print_header \"üìä TROUBLESHOOTING SUPERSET\"\n    \n    print_message \"Verificando contenedores de Superset...\"\n    \n    containers=(\"superset_app\" \"superset_worker\" \"superset_worker_beat\")\n    for container in \"${containers[@]}\"; do\n        if docker ps | grep -q \"$container\"; then\n            print_message \"‚úÖ $container corriendo\"\n        else\n            print_warning \"‚ö†Ô∏è  $container no est√° corriendo\"\n        fi\n    done\n    \n    # Test conectividad web\n    if curl -s http://localhost:8088/health >/dev/null 2>&1; then\n        print_message \"‚úÖ Superset web accesible\"\n    else\n        print_warning \"‚ö†Ô∏è  Superset web no accesible\"\n        print_message \"Verifica que PostgreSQL y Redis est√©n corriendo primero\"\n    fi\n}\n\n# Funci√≥n de cleanup completo\nfull_cleanup() {\n    print_header \"üßπ CLEANUP COMPLETO\"\n    \n    print_warning \"Esto eliminar√° TODOS los contenedores, vol√∫menes e im√°genes\"\n    read -p \"¬øContinuar? (y/N): \" -n 1 -r\n    echo\n    \n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        print_message \"Deteniendo todos los contenedores...\"\n        docker compose -f docker-compose.dev.yml down -v --remove-orphans 2>/dev/null || true\n        \n        print_message \"Limpiando sistema Docker...\"\n        docker system prune -af\n        \n        print_message \"Removiendo vol√∫menes...\"\n        docker volume prune -f\n        \n        print_message \"‚úÖ Cleanup completo finalizado\"\n        print_message \"Ahora puedes ejecutar: ./dev-stack.sh start\"\n    else\n        print_message \"Cleanup cancelado\"\n    fi\n}\n\n# Men√∫ principal\ncase \"${1:-all}\" in\n    \"all\")\n        run_troubleshooting\n        ;;\n    \"postgres\")\n        troubleshoot_postgres\n        ;;\n    \"redis\")\n        troubleshoot_redis\n        ;;\n    \"superset\")\n        troubleshoot_superset\n        ;;\n    \"cleanup\")\n        full_cleanup\n        ;;\n    \"permissions\")\n        fix_permissions\n        ;;\n    \"network\")\n        check_network\n        ;;\n    \"ports\")\n        check_ports\n        ;;\n    \"help\"|*)\n        echo \"Uso: $0 [comando]\"\n        echo \"\"\n        echo \"Comandos disponibles:\"\n        echo \"  all        - Ejecutar todos los diagn√≥sticos (por defecto)\"\n        echo \"  postgres   - Troubleshooting espec√≠fico de PostgreSQL\"\n        echo \"  redis      - Troubleshooting espec√≠fico de Redis\"\n        echo \"  superset   - Troubleshooting espec√≠fico de Superset\"\n        echo \"  cleanup    - Cleanup completo del sistema\"\n        echo \"  permissions- Arreglar permisos de archivos\"\n        echo \"  network    - Verificar red Docker\"\n        echo \"  ports      - Verificar puertos disponibles\"\n        echo \"  help       - Mostrar esta ayuda\"\n        echo \"\"\n        echo \"Ejemplos:\"\n        echo \"  $0                    # Diagn√≥stico completo\"\n        echo \"  $0 postgres          # Solo PostgreSQL\"\n        echo \"  $0 cleanup           # Limpiar todo y empezar fresh\"\n        ;;\nesac